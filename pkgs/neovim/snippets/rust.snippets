global !p
from vim_helpers.snips import complete
endglobal

snippet #! "Options" A
#![$1`!p snip.rv = complete(t[1], ["allow", "cfg", "deny"])`($0)]
endsnippet

snippet fn "Function"
fn ${1:name}($2) {
	${0:${VISUAL}}
}
endsnippet

snippet struct "Struct"
struct ${1:Name} {
	${0:${VISUAL}}
}
endsnippet

snippet enum "Enum"
enum ${1:Name} {
	${0:${VISUAL}}
}
endsnippet

snippet impl "impl Trait for Struct"
impl ${1:Struct} {
	$0
}
endsnippet

snippet new "fn new() { ... }"
fn new($1) -> Self {
	Self {
		${1/([a-zA-Z0-9_]+):\s*(?:[a-zA-Z0-9_]+),?\s*/$1,
		/g}$0
	}
}
endsnippet

# Properties {{{

snippet get "fn option(...) { ... }"
fn ${1:option}(&self) -> ${2:Type} {
	self.${3:$1}$0
}
endsnippet

snippet set "fn set_option(...) { ... }"
fn set_${1:option}(&mut self, value: ${2:Type}) {
	self.${3:$1} = value;$0
}
endsnippet

snippet with "fn with_option(...) { ... }"
fn with_${1:option}(mut self, value: ${2:Type}) -> Self {
	self.${3:$1}$0 = value;$0
	self
}
endsnippet

# }}}

# impls {{{

snippet default "impl Default for ..."
impl Default for $1 {
	fn default() -> Self {
		Self {
			${0:${VISUAL}}
		}
	}
}
impl $1 {
	/// Construct a new instance. Alias for \`$1::default()\`
	pub fn new() -> Self {
		Self::default()
	}
}
endsnippet

snippet display "impl Display for ..."
impl Display for $1 {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		${0:write!(f, "${2:$1({})}", ${3:self.0})}
	}
}
endsnippet

snippet debug "impl Debug for ..."
impl Debug for $1 {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		${0:write!(f, "${2:$1({:?})}", ${3:self.0})}
	}
}
endsnippet

snippet iter "impl Iterator for ..."
impl Iterator for $1 {
	type Item = $2;
	fn next(&mut self) -> Option<Self::Item> {
		${0:${VISUAL}}
	}
}
endsnippet

# }}}
