snippet _skel_flake "Template flake.nix"
{
	description = "${1:A really useful tool that does an awesome thing}";

	inputs = {
		utils.url = "github:numtide/flake-utils";
	};

	outputs = { self, nixpkgs, utils }:
		utils.lib.eachDefaultSystem (system:
			let
				pkgs = nixpkgs.legacyPackages."\${system}";
			in
			rec {
				# \`nix build\`
				packages.${2:hello} = ${0:pkgs.writeShellScriptBin "$2" "echo Hello, World!"};
				defaultPackage = packages.$2;

				# \`nix run\`
				apps.$2 = utils.lib.mkApp {
					drv = packages.$2;
				};
				defaultApp = apps.$2;

				# \`nix develop\`
				devShell = pkgs.mkShell {
					buildInputs = with pkgs; [ openssl ];
					nativeBuildInputs = with pkgs; [ gcc ];
				};
			});
}
endsnippet

snippet "\[\s*((?:[a-zA-Z0-9._-]+\s+)*)\]" "Expand list" r
`!p
snip.rv = "["
snip >> 1
for im in match[1].split():
	snip += im.strip()
snip << 1
snip += "]"
`
endsnippet

snippet "([a-zA-Z0-9_-]+\s+)=" "Set entry" Ar
`!p snip.rv = match[1]`=$0;
endsnippet

# only one trailing ' here because my setup closes it automatically
snippet ' "Multiline string" A
''
	$0
'
endsnippet

snippet mod "Nix module"
{ pkgs, lib, config, ... }:

with lib;
let
	cfg = config.$1;
in
{
	options.${1:programs.hello} = {
		enable = mkEnableOption "${2:Enable GNU Hello}";
		option = mkOption {
			type = types.str;
			description = "Greeting";
			default = "";
		};
	};

	config = mkIf cfg.enable {
		${0:${VISUAL}}
	};
}
endsnippet

snippet mkOption "lib.mkOption { ... }"
mkOption {
	type = types.${1:str};
	description = "${2:A string option}";
	default = ${3:""};
}
endsnippet

snippet symlinkJoin "pkgs.symlinkJoin { ... }"
pkgs.symlinkJoin {
	name = "$1";
	paths = [ ${2:pkgs.$1} ];

	nativeBuildInputs = [ pkgs.makeWrapper ];

	postBuild = ''
		rm "$out/bin/$3"
		makeWrapper "${$2}/bin/${3:$1}" "$out/bin/$3"
	'';
}
endsnippet
